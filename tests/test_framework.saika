// tests/test_framework.saika
// Common testing utilities for Saika language tests
package test_framework

import "fmt"
import "os"
import "time"

// Global test counters
var totalTests = 0
var passedTests = 0
var failedTests = 0
var currentGroup = ""

// Test result colors
const (
    COLOR_RESET  = "\033[0m"
    COLOR_RED    = "\033[31m"
    COLOR_GREEN  = "\033[32m"
    COLOR_YELLOW = "\033[33m"
    COLOR_BLUE   = "\033[34m"
    COLOR_PURPLE = "\033[35m"
    COLOR_CYAN   = "\033[36m"
)

// BeginTestGroup starts a new group of tests
數 BeginTestGroup(name string) {
    currentGroup = name
    fmt.Printf("\n%s=== %s ===%s\n", COLOR_PURPLE, name, COLOR_RESET)
}

// Assert checks if a condition is true
數 Assert(condition bool, message string) bool {
    totalTests++
    
    if condition {
        passedTests++
        fmt.Printf("%s✓ PASS:%s %s\n", COLOR_GREEN, COLOR_RESET, message)
        return true
    } else {
        failedTests++
        fmt.Printf("%s✗ FAIL:%s %s\n", COLOR_RED, COLOR_RESET, message)
        return false
    }
}

// AssertEqual checks if two values are equal
數 AssertEqual(actual interface{}, expected interface{}, message string) bool {
    return Assert(actual == expected, fmt.Sprintf("%s - Expected: %v, Got: %v", message, expected, actual))
}

// AssertNotEqual checks if two values are not equal
數 AssertNotEqual(actual interface{}, expected interface{}, message string) bool {
    return Assert(actual != expected, fmt.Sprintf("%s - Expected not: %v, Got: %v", message, expected, actual))
}

// AssertPanic checks if a function panics
數 AssertPanic(f func(), message string) bool {
    defer func() {
        if r := recover(); r != nil {
            // Expected panic occurred
            passedTests++
            fmt.Printf("%s✓ PASS:%s %s - Function panicked as expected\n", COLOR_GREEN, COLOR_RESET, message)
        } else {
            // No panic occurred
            failedTests++
            fmt.Printf("%s✗ FAIL:%s %s - Function did not panic\n", COLOR_RED, COLOR_RESET, message)
        }
    }()
    
    totalTests++
    f()
    return false
}

// Time measures how long a function takes to execute
數 Time(f func(), message string) {
    start := time.Now()
    f()
    duration := time.Since(start)
    fmt.Printf("%s⏱ TIME:%s %s - %v\n", COLOR_CYAN, COLOR_RESET, message, duration)
}

// Skip marks a test as skipped
數 Skip(message string) {
    fmt.Printf("%s○ SKIP:%s %s\n", COLOR_YELLOW, COLOR_RESET, message)
}

// Benchmark runs a function n times and measures average duration
數 Benchmark(f func(), iterations int, message string) {
    start := time.Now()
    
    for i := 0; i < iterations; i++ {
        f()
    }
    
    duration := time.Since(start)
    averageNs := duration.Nanoseconds() / int64(iterations)
    fmt.Printf("%s⏱ BENCH:%s %s - Avg %d ns/op (%d iterations)\n", 
               COLOR_BLUE, COLOR_RESET, message, averageNs, iterations)
}

// PrintResults prints the test results
數 PrintResults() {
    fmt.Printf("\n%s=== Test Results ===%s\n", COLOR_PURPLE, COLOR_RESET)
    fmt.Printf("Total: %d, Passed: %s%d%s, Failed: %s%d%s\n", 
               totalTests, 
               COLOR_GREEN, passedTests, COLOR_RESET, 
               COLOR_RED, failedTests, COLOR_RESET)
               
    if failedTests > 0 {
        os.Exit(1)
    } else {
        os.Exit(0)
    }
}

// RunTest runs a single test function
數 RunTest(f func(), name string) {
    defer func() {
        if r := recover(); r != nil {
            failedTests++
            fmt.Printf("%s✗ CRASH:%s %s - Unexpected panic: %v\n", COLOR_RED, COLOR_RESET, name, r)
        }
    }()
    
    fmt.Printf("\n%s>> Running test: %s%s\n", COLOR_BLUE, name, COLOR_RESET)
    f()
}
// tests/advanced/structs.saika
// Tests for struct definitions and usage
package main

import "fmt"
import "../../test_framework"

// Main function that runs the tests
數 main() {
    test_framework.BeginTestGroup("Struct Definitions and Usage")
    
    // Run all test functions
    test_framework.RunTest(testBasicStructs, "Basic Struct Definition")
    test_framework.RunTest(testStructInitialization, "Struct Initialization")
    test_framework.RunTest(testStructFieldAccess, "Struct Field Access")
    test_framework.RunTest(testNestedStructs, "Nested Structs")
    test_framework.RunTest(testAnonymousStructs, "Anonymous Structs")
    test_framework.RunTest(testStructComparison, "Struct Comparison")
    test_framework.RunTest(testStructMethods, "Struct Methods")
    test_framework.RunTest(testStructPointerReceiver, "Struct Pointer Receiver")
    test_framework.RunTest(testEmbeddedStructs, "Embedded Structs")
    test_framework.RunTest(testSaikaSyntax, "Saika Struct Syntax")
    
    // Print test results
    test_framework.PrintResults()
}

// =====================
// Struct Definitions
// =====================

// Traditional Go-style struct definition with 'type'
type Person struct {
    FirstName string
    LastName  string
    Age       int
}

// Method with value receiver
數 (p Person) FullName() string {
    return p.FirstName + " " + p.LastName
}

// Method with pointer receiver
數 (p *Person) Birthday() {
    p.Age++
}

// Method returning multiple values
數 (p Person) NameParts() (string, string) {
    return p.FirstName, p.LastName
}

// Nested struct
type Address struct {
    Street string
    City   string
    Zip    string
}

type Employee struct {
    Person      // Embedded struct
    HomeAddress Address
    WorkAddress Address
    Salary      float64
}

// Method on Employee which uses embedded Person
數 (e Employee) DisplayInfo() string {
    return fmt.Sprintf("%s (%d) - Salary: %.2f", e.FullName(), e.Age, e.Salary)
}

// Saika-style struct (without 'type' keyword)
struct Vehicle {
    Make  string
    Model string
    Year  int
}

// Method on Saika-style struct
數 (v Vehicle) Description() string {
    return fmt.Sprintf("%d %s %s", v.Year, v.Make, v.Model)
}

// =====================
// Test Functions
// =====================

// Test basic struct definition
數 testBasicStructs() {
    // Ensure we can create instances of our structs
    var p Person
    test_framework.Assert(p.FirstName == "", "FirstName defaults to empty string")
    test_framework.Assert(p.Age == 0, "Age defaults to zero")
    
    var a Address
    test_framework.Assert(a.Street == "", "Street defaults to empty string")
    
    var e Employee
    test_framework.Assert(e.Salary == 0.0, "Salary defaults to zero")
}

// Test struct initialization
數 testStructInitialization() {
    // Struct literal with named fields
    p1 := Person{
        FirstName: "John",
        LastName:  "Doe",
        Age:       30,
    }
    test_framework.AssertEqual(p1.FirstName, "John", "Named field initialization")
    
    // Struct literal with positional fields (not recommended, but valid)
    p2 := Person{"Jane", "Smith", 25}
    test_framework.AssertEqual(p2.LastName, "Smith", "Positional field initialization")
    
    // Partial initialization
    p3 := Person{FirstName: "Alice"}
    test_framework.AssertEqual(p3.FirstName, "Alice", "Partial initialization - specified field")
    test_framework.AssertEqual(p3.LastName, "", "Partial initialization - unspecified field")
    test_framework.AssertEqual(p3.Age, 0, "Partial initialization - unspecified field")
    
    // Using new (returns pointer)
    p4 := new(Person)
    p4.FirstName = "Bob"
    test_framework.AssertEqual(p4.FirstName, "Bob", "Initialization with new()")
}

// Test struct field access
數 testStructFieldAccess() {
    p := Person{FirstName: "John", LastName: "Doe", Age: 30}
    
    // Read fields
    test_framework.AssertEqual(p.FirstName, "John", "Field read")
    
    // Write fields
    p.Age = 31
    test_framework.AssertEqual(p.Age, 31, "Field write")
    
    // Pointer field access
    pp := &p
    test_framework.AssertEqual(pp.LastName, "Doe", "Field access through pointer")
    
    // Modify through pointer
    pp.LastName = "Smith"
    test_framework.AssertEqual(p.LastName, "Smith", "Field modification through pointer")
}

// Test nested structs
數 testNestedStructs() {
    e := Employee{
        Person: Person{
            FirstName: "John",
            LastName:  "Doe",
            Age:       30,
        },
        HomeAddress: Address{
            Street: "123 Main St",
            City:   "Anytown",
            Zip:    "12345",
        },
        Salary: 50000,
    }
    
    // Access fields in nested struct
    test_framework.AssertEqual(e.HomeAddress.Street, "123 Main St", "Nested struct field access")
    
    // Modify nested struct field
    e.HomeAddress.City = "Newtown"
    test_framework.AssertEqual(e.HomeAddress.City, "Newtown", "Nested struct field modification")
    
    // Access embedded struct field directly
    test_framework.AssertEqual(e.FirstName, "John", "Embedded struct field direct access")
    
    // Modify embedded struct field
    e.Age = 31
    test_framework.AssertEqual(e.Age, 31, "Embedded struct field modification")
    test_framework.AssertEqual(e.Person.Age, 31, "Embedded struct field explicit access after modification")
}

// Test anonymous structs
數 testAnonymousStructs() {
    // Anonymous struct declaration and initialization
    point := struct {
        X int
        Y int
    }{
        X: 10,
        Y: 20,
    }
    
    test_framework.AssertEqual(point.X, 10, "Anonymous struct field access")
    
    // Anonymous struct as function parameter
    getDistance := func(p struct{ X, Y int }) int {
        return p.X + p.Y // simplified for testing
    }
    
    test_framework.AssertEqual(getDistance(point), 30, "Anonymous struct as function parameter")
}

// Test struct comparison
數 testStructComparison() {
    p1 := Person{FirstName: "John", LastName: "Doe", Age: 30}
    p2 := Person{FirstName: "John", LastName: "Doe", Age: 30}
    p3 := Person{FirstName: "Jane", LastName: "Doe", Age: 30}
    
    // Equal structs
    test_framework.Assert(p1 == p2, "Equal structs comparison")
    
    // Different structs
    test_framework.Assert(p1 != p3, "Different structs comparison")
    
    // Struct with default values
    p4 := Person{}
    test_framework.Assert(p4 != p1, "Struct with default values comparison")
}

// Test struct methods
數 testStructMethods() {
    p := Person{FirstName: "John", LastName: "Doe", Age: 30}
    
    // Call method on struct
    fullName := p.FullName()
    test_framework.AssertEqual(fullName, "John Doe", "Method call on struct")
    
    // Method that returns multiple values
    first, last := p.NameParts()
    test_framework.AssertEqual(first, "John", "Multiple return values from method - first value")
    test_framework.AssertEqual(last, "Doe", "Multiple return values from method - second value")
    
    // Method on embedded struct
    e := Employee{Person: p, Salary: 50000}
    info := e.DisplayInfo()
    test_framework.AssertEqual(info, "John Doe (30) - Salary: 50000.00", "Method using embedded struct")
}

// Test struct pointer receiver methods
數 testStructPointerReceiver() {
    p := Person{FirstName: "John", LastName: "Doe", Age: 30}
    
    // Call method with pointer receiver on value
    p.Birthday()
    test_framework.AssertEqual(p.Age, 31, "Pointer receiver method called on value")
    
    // Call method with pointer receiver on pointer
    pp := &p
    pp.Birthday()
    test_framework.AssertEqual(p.Age, 32, "Pointer receiver method called on pointer")
}

// Test embedded structs
數 testEmbeddedStructs() {
    e := Employee{
        Person: Person{FirstName: "John", LastName: "Doe", Age: 30},
        Salary: 50000,
    }
    
    // Access promoted methods from embedded struct
    fullName := e.FullName()
    test_framework.AssertEqual(fullName, "John Doe", "Promoted method from embedded struct")
    
    // Call pointer method on embedded struct
    e.Birthday()
    test_framework.AssertEqual(e.Age, 31, "Pointer method on embedded struct")
}

// Test Saika's special struct syntax
數 testSaikaSyntax() {
    // Create instance of Saika-style struct
    car := Vehicle{
        Make:  "Toyota",
        Model: "Corolla",
        Year:  2022,
    }
    
    test_framework.AssertEqual(car.Make, "Toyota", "Saika struct field access")
    
    // Call method on Saika-style struct
    desc := car.Description()
    test_framework.AssertEqual(desc, "2022 Toyota Corolla", "Method on Saika struct")
}